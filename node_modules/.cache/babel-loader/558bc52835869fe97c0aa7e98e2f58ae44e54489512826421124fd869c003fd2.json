{"ast":null,"code":"var _jsxFileName = \"/Users/mameboussodiakhate/Desktop/final2/cs337finalproject/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport api from './services/api';\nimport Navigation from './components/Navigation';\nimport Login from './pages/Login';\nimport Dashboard from './pages/Dashboard';\nimport TransactionPage from './pages/TransactionPage';\nimport HelpPage from './pages/HelpPage';\nimport Leaderboard from './pages/Leaderboard';\nimport SavingsPage from './pages/Savings';\nimport FriendsPage from './pages/FriendsPage';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentPage, setCurrentPage] = useState('login');\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [userData, setUserData] = useState({\n    username: '',\n    budget: 0,\n    balance: 0,\n    transactions: [],\n    _id: null,\n    friends: [],\n    pendingFriendRequests: []\n  });\n  useEffect(() => {\n    const storedUserData = localStorage.getItem('userData');\n    if (storedUserData) {\n      const parsedUserData = JSON.parse(storedUserData);\n      setUserData(parsedUserData);\n      setIsLoggedIn(true);\n      setCurrentPage('dashboard');\n    }\n  }, []);\n  const updateUserDataAndStorage = newData => {\n    const updatedData = {\n      ...newData,\n      transactions: newData.transactions || []\n    };\n    localStorage.setItem('userData', JSON.stringify(updatedData));\n    setUserData(updatedData);\n  };\n  const handleLogin = async (username, initialBalance, isSignup) => {\n    try {\n      const response = isSignup ? await api.signup(username, initialBalance) : await api.login(username);\n      if (!response._id) {\n        throw new Error('Invalid response from server');\n      }\n      const newUserData = {\n        _id: response._id,\n        username: response.username,\n        budget: response.budget,\n        balance: response.balance,\n        transactions: response.transactions || [],\n        friends: [],\n        pendingFriendRequests: []\n      };\n      updateUserDataAndStorage(newUserData);\n      setIsLoggedIn(true);\n      setCurrentPage('dashboard');\n      return response;\n    } catch (error) {\n      throw new Error('Username not found');\n    }\n  };\n  const handleAddTransaction = async transaction => {\n    const userId = userData._id;\n    if (!userId) throw new Error('User ID not found');\n    try {\n      const response = await api.addTransaction(userId, {\n        ...transaction,\n        amount: Number(transaction.amount),\n        userId: userId,\n        incomeSource: transaction.incomeSource\n      });\n      const updatedUserData = {\n        ...userData,\n        balance: response.balance,\n        transactions: response.transactions || []\n      };\n      updateUserDataAndStorage(updatedUserData);\n      return response;\n    } catch (error) {\n      console.error('Transaction failed:', error);\n      throw error;\n    }\n  };\n  const handleLogout = () => {\n    localStorage.removeItem('userData');\n    setIsLoggedIn(false);\n    setCurrentPage('login');\n    localStorage.removeItem('dashboardViewMode');\n    setUserData({\n      username: '',\n      budget: 0,\n      balance: 0,\n      transactions: [],\n      _id: null,\n      friends: [],\n      pendingFriendRequests: []\n    });\n  };\n  const handleUpdateSavingsGoal = async newGoal => {\n    try {\n      const response = await fetch('http://localhost:5001/api/users/savings/goal', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: userData._id,\n          newGoal\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.message);\n      updateUserDataAndStorage({\n        ...userData,\n        savingsGoal: data.savingsGoal\n      });\n    } catch (error) {\n      throw new Error('Failed to update savings goal');\n    }\n  };\n  const handleAddToSavings = async amount => {\n    try {\n      const response = await fetch('http://localhost:5001/api/users/savings/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: userData._id,\n          amount\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.message);\n      updateUserDataAndStorage({\n        ...userData,\n        balance: data.balance,\n        currentSavings: data.currentSavings,\n        transactions: [data.transaction, ...userData.transactions]\n      });\n    } catch (error) {\n      throw new Error('Failed to add to savings');\n    }\n  };\n  const handleWithdrawFromSavings = async amount => {\n    try {\n      const response = await fetch('http://localhost:5001/api/users/savings/withdraw', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: userData._id,\n          amount\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.message);\n      updateUserDataAndStorage({\n        ...userData,\n        balance: data.balance,\n        currentSavings: data.currentSavings,\n        transactions: [data.transaction, ...userData.transactions]\n      });\n    } catch (error) {\n      throw new Error('Failed to withdraw from savings');\n    }\n  };\n\n  // Friends functionality\n  const handleSendFriendRequest = async friendUsername => {\n    try {\n      const response = await fetch('http://localhost:5001/api/friends/request', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: userData._id,\n          friendUsername\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.message);\n      return data;\n    } catch (error) {\n      throw new Error('Failed to send friend request');\n    }\n  };\n  const handleAcceptFriendRequest = async requestId => {\n    try {\n      const updatedPendingRequests = userData.pendingFriendRequests.filter(request => request._id !== requestId);\n      updateUserDataAndStorage({\n        ...userData,\n        pendingFriendRequests: updatedPendingRequests\n      });\n      const response = await fetch('http://localhost:5001/api/friends/accept', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: userData._id,\n          requestId\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.message);\n\n      // Finally, update friends list\n      await fetchFriendsList();\n      return data;\n    } catch (error) {\n      throw new Error('Failed to accept friend request');\n    }\n  };\n  const handleRejectFriendRequest = async requestId => {\n    try {\n      const response = await fetch('http://localhost:5001/api/friends/reject', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: userData._id,\n          requestId\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) throw new Error(data.message);\n      return data;\n    } catch (error) {\n      throw new Error('Failed to reject friend request');\n    }\n  };\n  const fetchFriendsList = async () => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/friends/list/${userData._id}`);\n      const data = await response.json();\n      if (!response.ok) throw new Error('Failed to fetch friends');\n      updateUserDataAndStorage({\n        ...userData,\n        friends: data\n      });\n    } catch (error) {\n      console.error('Failed to fetch friends:', error);\n    }\n  };\n  const fetchPendingFriendRequests = async () => {\n    try {\n      const response = await fetch(`http://localhost:5001/api/friends/pending/${userData._id}`);\n      const data = await response.json();\n      if (!response.ok) throw new Error('Failed to fetch pending requests');\n      updateUserDataAndStorage({\n        ...userData,\n        pendingFriendRequests: data\n      });\n    } catch (error) {\n      console.error('Failed to fetch pending requests:', error);\n    }\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(() => {\n    if (isLoggedIn && userData._id) {\n      fetchFriendsList();\n      fetchPendingFriendRequests();\n    }\n  }, [isLoggedIn]);\n  const renderPage = () => {\n    const pages = {\n      login: /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: handleLogin\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 20\n      }, this),\n      leaderboard: /*#__PURE__*/_jsxDEV(Leaderboard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 26\n      }, this),\n      dashboard: /*#__PURE__*/_jsxDEV(Dashboard, {\n        userData: userData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 17\n      }, this),\n      savings: /*#__PURE__*/_jsxDEV(SavingsPage, {\n        userData: userData,\n        onUpdateSavingsGoal: handleUpdateSavingsGoal,\n        onAddToSavings: handleAddToSavings,\n        onWithdrawFromSavings: handleWithdrawFromSavings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 17\n      }, this),\n      transactions: /*#__PURE__*/_jsxDEV(TransactionPage, {\n        transactions: userData.transactions,\n        onAddTransaction: handleAddTransaction,\n        currentBalance: userData.balance,\n        userData: userData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 17\n      }, this),\n      help: /*#__PURE__*/_jsxDEV(HelpPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 19\n      }, this),\n      friends: /*#__PURE__*/_jsxDEV(FriendsPage, {\n        userData: userData,\n        onSendRequest: handleSendFriendRequest,\n        onAcceptRequest: handleAcceptFriendRequest,\n        onRejectRequest: handleRejectFriendRequest,\n        onRefreshFriends: fetchFriendsList,\n        onRefreshPending: fetchPendingFriendRequests\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 17\n      }, this)\n    };\n    return pages[currentPage] || pages.login;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [isLoggedIn && /*#__PURE__*/_jsxDEV(Navigation, {\n      currentPage: currentPage,\n      onNavigate: setCurrentPage,\n      onLogout: handleLogout\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 17\n    }, this), renderPage()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 349,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"XnSBFK/I2Y+d9KLm5eL3Iv3a70U=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","api","Navigation","Login","Dashboard","TransactionPage","HelpPage","Leaderboard","SavingsPage","FriendsPage","jsxDEV","_jsxDEV","App","_s","currentPage","setCurrentPage","isLoggedIn","setIsLoggedIn","userData","setUserData","username","budget","balance","transactions","_id","friends","pendingFriendRequests","storedUserData","localStorage","getItem","parsedUserData","JSON","parse","updateUserDataAndStorage","newData","updatedData","setItem","stringify","handleLogin","initialBalance","isSignup","response","signup","login","Error","newUserData","error","handleAddTransaction","transaction","userId","addTransaction","amount","Number","incomeSource","updatedUserData","console","handleLogout","removeItem","handleUpdateSavingsGoal","newGoal","fetch","method","headers","body","data","json","ok","message","savingsGoal","handleAddToSavings","currentSavings","handleWithdrawFromSavings","handleSendFriendRequest","friendUsername","handleAcceptFriendRequest","requestId","updatedPendingRequests","filter","request","fetchFriendsList","handleRejectFriendRequest","fetchPendingFriendRequests","renderPage","pages","onLogin","fileName","_jsxFileName","lineNumber","columnNumber","leaderboard","dashboard","savings","onUpdateSavingsGoal","onAddToSavings","onWithdrawFromSavings","onAddTransaction","currentBalance","help","onSendRequest","onAcceptRequest","onRejectRequest","onRefreshFriends","onRefreshPending","className","children","onNavigate","onLogout","_c","$RefreshReg$"],"sources":["/Users/mameboussodiakhate/Desktop/final2/cs337finalproject/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport api from './services/api';\nimport Navigation from './components/Navigation';\nimport Login from './pages/Login';\nimport Dashboard from './pages/Dashboard';\nimport TransactionPage from './pages/TransactionPage';\nimport HelpPage from './pages/HelpPage';\nimport Leaderboard from './pages/Leaderboard';\nimport SavingsPage from './pages/Savings';\nimport FriendsPage from './pages/FriendsPage';\nimport './App.css';\n\nfunction App() {\n    const [currentPage, setCurrentPage] = useState('login');\n    const [isLoggedIn, setIsLoggedIn] = useState(false);\n    const [userData, setUserData] = useState({\n        username: '',\n        budget: 0,\n        balance: 0,\n        transactions: [],\n        _id: null,\n        friends: [],\n        pendingFriendRequests: []\n    });\n\n    useEffect(() => {\n        const storedUserData = localStorage.getItem('userData');\n        if (storedUserData) {\n            const parsedUserData = JSON.parse(storedUserData);\n            setUserData(parsedUserData);\n            setIsLoggedIn(true);\n            setCurrentPage('dashboard');\n        }\n    }, []);\n\n    const updateUserDataAndStorage = (newData) => {\n        const updatedData = {\n            ...newData,\n            transactions: newData.transactions || []\n        };\n        localStorage.setItem('userData', JSON.stringify(updatedData));\n        setUserData(updatedData);\n    };\n\n    const handleLogin = async (username, initialBalance, isSignup) => {\n        try {\n            const response = isSignup \n                ? await api.signup(username, initialBalance)\n                : await api.login(username);\n\n            if (!response._id) {\n                throw new Error('Invalid response from server');\n            }\n           \n            const newUserData = {\n                _id: response._id,\n                username: response.username,\n                budget: response.budget,\n                balance: response.balance,\n                transactions: response.transactions || [],\n                friends: [],\n                pendingFriendRequests: []\n            };\n\n            updateUserDataAndStorage(newUserData);\n            setIsLoggedIn(true);\n            setCurrentPage('dashboard');\n            \n            return response;\n        } catch (error) {\n            throw new Error('Username not found');\n        }\n    };\n\n    const handleAddTransaction = async (transaction) => {\n        const userId = userData._id;\n        if (!userId) throw new Error('User ID not found');\n\n        try {\n            const response = await api.addTransaction(userId, {\n                ...transaction,\n                amount: Number(transaction.amount),\n                userId: userId,\n                incomeSource: transaction.incomeSource\n            });\n\n            const updatedUserData = {\n                ...userData,\n                balance: response.balance,\n                transactions: response.transactions || []\n            };\n\n            updateUserDataAndStorage(updatedUserData);\n            return response;\n        } catch (error) {\n            console.error('Transaction failed:', error);\n            throw error;\n        }\n    };\n\n    const handleLogout = () => {\n        localStorage.removeItem('userData');\n        setIsLoggedIn(false);\n        setCurrentPage('login');\n        localStorage.removeItem('dashboardViewMode'); \n        setUserData({\n            username: '',\n            budget: 0,\n            balance: 0,\n            transactions: [],\n            _id: null,\n            friends: [],\n            pendingFriendRequests: []\n        });\n    };\n\n    const handleUpdateSavingsGoal = async (newGoal) => {\n        try {\n            const response = await fetch('http://localhost:5001/api/users/savings/goal', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    userId: userData._id,\n                    newGoal\n                })\n            });\n            const data = await response.json();\n            if (!response.ok) throw new Error(data.message);\n\n            updateUserDataAndStorage({\n                ...userData,\n                savingsGoal: data.savingsGoal\n            });\n        } catch (error) {\n            throw new Error('Failed to update savings goal');\n        }\n    };\n\n    const handleAddToSavings = async (amount) => {\n        try {\n            const response = await fetch('http://localhost:5001/api/users/savings/add', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    userId: userData._id,\n                    amount\n                })\n            });\n            const data = await response.json();\n            if (!response.ok) throw new Error(data.message);\n\n            updateUserDataAndStorage({\n                ...userData,\n                balance: data.balance,\n                currentSavings: data.currentSavings,\n                transactions: [data.transaction, ...userData.transactions]\n            });\n        } catch (error) {\n            throw new Error('Failed to add to savings');\n        }\n    };\n\n    const handleWithdrawFromSavings = async (amount) => {\n        try {\n            const response = await fetch('http://localhost:5001/api/users/savings/withdraw', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    userId: userData._id,\n                    amount\n                })\n            });\n            const data = await response.json();\n            if (!response.ok) throw new Error(data.message);\n\n            updateUserDataAndStorage({\n                ...userData,\n                balance: data.balance,\n                currentSavings: data.currentSavings,\n                transactions: [data.transaction, ...userData.transactions]\n            });\n        } catch (error) {\n            throw new Error('Failed to withdraw from savings');\n        }\n    };\n\n    // Friends functionality\n    const handleSendFriendRequest = async (friendUsername) => {\n        try {\n            const response = await fetch('http://localhost:5001/api/friends/request', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    userId: userData._id,\n                    friendUsername\n                })\n            });\n            const data = await response.json();\n            if (!response.ok) throw new Error(data.message);\n            return data;\n        } catch (error) {\n            throw new Error('Failed to send friend request');\n        }\n    };\n\n    const handleAcceptFriendRequest = async (requestId) => {\n        try {\n           \n            const updatedPendingRequests = userData.pendingFriendRequests.filter(\n                request => request._id !== requestId\n            );\n            \n           \n            updateUserDataAndStorage({\n                ...userData,\n                pendingFriendRequests: updatedPendingRequests\n            });\n    \n            const response = await fetch('http://localhost:5001/api/friends/accept', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    userId: userData._id,\n                    requestId\n                })\n            });\n            const data = await response.json();\n            if (!response.ok) throw new Error(data.message);\n    \n            // Finally, update friends list\n            await fetchFriendsList();\n            return data;\n        } catch (error) {\n            throw new Error('Failed to accept friend request');\n        }\n    };\n    \n\n    const handleRejectFriendRequest = async (requestId) => {\n        try {\n            const response = await fetch('http://localhost:5001/api/friends/reject', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    userId: userData._id,\n                    requestId\n                })\n            });\n            const data = await response.json();\n            if (!response.ok) throw new Error(data.message);\n            return data;\n        } catch (error) {\n            throw new Error('Failed to reject friend request');\n        }\n    };\n\n    const fetchFriendsList = async () => {\n        try {\n            const response = await fetch(`http://localhost:5001/api/friends/list/${userData._id}`);\n            const data = await response.json();\n            if (!response.ok) throw new Error('Failed to fetch friends');\n            \n            updateUserDataAndStorage({\n                ...userData,\n                friends: data\n            });\n        } catch (error) {\n            console.error('Failed to fetch friends:', error);\n        }\n    };\n\n    const fetchPendingFriendRequests = async () => {\n        try {\n            const response = await fetch(`http://localhost:5001/api/friends/pending/${userData._id}`);\n            const data = await response.json();\n            if (!response.ok) throw new Error('Failed to fetch pending requests');\n            \n            updateUserDataAndStorage({\n                ...userData,\n                pendingFriendRequests: data\n            });\n        } catch (error) {\n            console.error('Failed to fetch pending requests:', error);\n        }\n    };\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    useEffect(() => {\n        if (isLoggedIn && userData._id) {\n            fetchFriendsList();\n            fetchPendingFriendRequests();\n        }\n    }, [isLoggedIn]);\n\n    const renderPage = () => {\n        const pages = {\n            login: <Login onLogin={handleLogin} />,\n            leaderboard: <Leaderboard />,\n            dashboard: (\n                <Dashboard\n                    userData={userData}\n                />\n            ),\n            savings: (\n                <SavingsPage\n                    userData={userData}\n                    onUpdateSavingsGoal={handleUpdateSavingsGoal}\n                    onAddToSavings={handleAddToSavings}\n                    onWithdrawFromSavings={handleWithdrawFromSavings}\n                />\n            ),\n            transactions: (\n                <TransactionPage\n                    transactions={userData.transactions}\n                    onAddTransaction={handleAddTransaction}\n                    currentBalance={userData.balance}\n                    userData={userData}\n                />\n            ),\n            help: <HelpPage />,\n            friends: (\n                <FriendsPage\n                    userData={userData}\n                    onSendRequest={handleSendFriendRequest}\n                    onAcceptRequest={handleAcceptFriendRequest}\n                    onRejectRequest={handleRejectFriendRequest}\n                    onRefreshFriends={fetchFriendsList}\n                    onRefreshPending={fetchPendingFriendRequests}\n                />\n            )\n        };\n\n        return pages[currentPage] || pages.login;\n    };\n\n    return (\n        <div className=\"App\">\n            {isLoggedIn && (\n                <Navigation\n                    currentPage={currentPage}\n                    onNavigate={setCurrentPage}\n                    onLogout={handleLogout}\n                />\n            )}\n            {renderPage()}\n        </div>\n    );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}