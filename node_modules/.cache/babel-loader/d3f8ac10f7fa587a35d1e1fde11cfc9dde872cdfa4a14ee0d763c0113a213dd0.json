{"ast":null,"code":"const API_URL = 'http://localhost:5001/api';\nconst api = {\n  // User Signup\n  signup: async (username, initialBalance) => {\n    const response = await fetch(`${API_URL}/users/signup`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        initialBalance: Number(initialBalance)\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Signup failed');\n    }\n    return data;\n  },\n  // User Login\n  login: async username => {\n    const response = await fetch(`${API_URL}/users/login`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username\n      })\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Login failed');\n    }\n    return data;\n  },\n  // Add Transaction\n  addTransaction: async (userId, transaction) => {\n    // Build the transaction payload based on the type\n    const payload = {\n      userId,\n      amount: Number(transaction.amount),\n      type: transaction.type,\n      category: transaction.category || null\n    };\n\n    // Add recipientUsername only for transfer transactions\n    if (transaction.type === 'transfer') {\n      if (!transaction.recipientUsername) {\n        throw new Error('Recipient username is required for transfer transactions.');\n      }\n      payload.recipientUsername = transaction.recipientUsername;\n    }\n    const response = await fetch(`${API_URL}/transactions/addTransaction`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify(payload)\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to add transaction');\n    }\n    return data;\n  },\n  // Fetch Transactions\n  getTransactions: async userId => {\n    const response = await fetch(`${API_URL}/transactions/${userId}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to fetch transactions');\n    }\n    return data;\n  },\n  // Fetch Leaderboard\n  getLeaderboard: async () => {\n    const response = await fetch(`${API_URL}/users/leaderboard`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to fetch leaderboard');\n    }\n    return data;\n  },\n  // Fetch Recent Transactions\n  getRecent: async () => {\n    const response = await fetch(`${API_URL}/transactions/recent`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.message || 'Failed to fetch recent transactions');\n    }\n    return data;\n  }\n};\nexport default api;","map":{"version":3,"names":["API_URL","api","signup","username","initialBalance","response","fetch","method","headers","body","JSON","stringify","Number","data","json","ok","Error","message","login","addTransaction","userId","transaction","payload","amount","type","category","recipientUsername","getTransactions","getLeaderboard","getRecent"],"sources":["/Users/mameboussodiakhate/Desktop/final2/cs337finalproject/src/services/api.js"],"sourcesContent":["const API_URL = 'http://localhost:5001/api';\n\nconst api = {\n    // User Signup\n    signup: async (username, initialBalance) => {\n        const response = await fetch(`${API_URL}/users/signup`, {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ \n                username, \n                initialBalance: Number(initialBalance),\n            }),\n        });\n\n        const data = await response.json();\n        if (!response.ok) {\n            throw new Error(data.message || 'Signup failed');\n        }\n        return data;\n    },\n\n    // User Login\n    login: async (username) => {\n        const response = await fetch(`${API_URL}/users/login`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ username }),\n        });\n\n        const data = await response.json();\n        if (!response.ok) {\n            throw new Error(data.message || 'Login failed');\n        }\n        return data;\n    },\n\n    // Add Transaction\n    addTransaction: async (userId, transaction) => {\n        // Build the transaction payload based on the type\n        const payload = {\n            userId,\n            amount: Number(transaction.amount),\n            type: transaction.type,\n            category: transaction.category || null,\n        };\n\n        // Add recipientUsername only for transfer transactions\n        if (transaction.type === 'transfer') {\n            if (!transaction.recipientUsername) {\n                throw new Error('Recipient username is required for transfer transactions.');\n            }\n            payload.recipientUsername = transaction.recipientUsername;\n        }\n\n        const response = await fetch(`${API_URL}/transactions/addTransaction`, {\n            method: 'POST',\n            headers: { \n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            },\n            body: JSON.stringify(payload),\n        });\n\n        const data = await response.json();\n        if (!response.ok) {\n            throw new Error(data.message || 'Failed to add transaction');\n        }\n        return data;\n    },\n\n    // Fetch Transactions\n    getTransactions: async (userId) => {\n        const response = await fetch(`${API_URL}/transactions/${userId}`, {\n            method: 'GET',\n            headers: { \n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            },\n        });\n\n        const data = await response.json();\n        if (!response.ok) {\n            throw new Error(data.message || 'Failed to fetch transactions');\n        }\n        return data;\n    },\n\n    // Fetch Leaderboard\n    getLeaderboard: async () => {\n        const response = await fetch(`${API_URL}/users/leaderboard`, {\n            method: 'GET',\n            headers: { \n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            },\n        });\n\n        const data = await response.json();\n        if (!response.ok) {\n            throw new Error(data.message || 'Failed to fetch leaderboard');\n        }\n        return data;\n    },\n\n    // Fetch Recent Transactions\n    getRecent: async () => {\n        const response = await fetch(`${API_URL}/transactions/recent`, {\n            method: 'GET',\n            headers: { \n                'Content-Type': 'application/json',\n                'Accept': 'application/json',\n            },\n        });\n\n        const data = await response.json();\n        if (!response.ok) {\n            throw new Error(data.message || 'Failed to fetch recent transactions');\n        }\n        return data;\n    }\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}